{
   "meta": {
      "name": "DiagramApp",
      "seo": {
         "keywords": [
            "diagram",
            "collaboration",
            "realtime",
            "interactive",
            "communication",
            "planning"
         ],
         "title": "Interactive Real-Time Diagramming with DiagramApp",
         "article": "Are you tired of non-interactive, complex diagramming tools that make collaboration a chore rather than a pleasure? How great would it be if there were an application that streamlines the entire process, providing real-time interaction and smooth collaboration? Enter DiagramApp, a solution designed to solve these problems. DiagramApp is a web application that allows users to create, edit and share diagrams in real-time. The right solution for teams seeking to improve communication, planning, and overall productivity. With key benefits such as easy-to-use interface, multi-user collaboration, instant sharing capabilities, and compatibility with various diagram types, DiagramApp is set to revolutionize the way teams interact with diagrams. Stop struggling with subpar tools. Try DiagramApp today for a seamless diagramming experience.",
         "tags": "diagramming, collaboration, realtime, interactive, DiagramApp"
      },
      "description": "DiagramApp is a web application that allows users to create, edit, and share diagrams in real-time.",
      "dependencies": [
         "react",
         "redux",
         "react-flow",
         "nextjs",
         "mongoose",
         "express",
         "jsonwebtoken",
         "tailwindcss",
         "axios"
      ],
      "summary": "A collaborative, real-time diagramming web application.",
      "tags": "diagramming, realtime, collaboration"
   },
   "messages": [
      "DiagramApp is a collaborative, real-time diagramming web application.",
      "npm install react @reduxjs/toolkit react-flow nextjs jsonwebtoken tailwindcss axios postgresql express ",
      "Implementation steps include setting up the frontend with React and Next.js, setting up the backend with Express.js and PostgreSQL, integrating real-time features, and testing.",
      "'frontend': {'public': {    'favicon.ico': 'Favicon for the application',    'manifest.json': 'Manifest file for enabling PWA features',    'robots.txt': 'Specifies which parts of the site should be crawled by web crawlers'},'src': {    'pages': {        'index.jsx': 'Home page of the app. Imports Header and Footer components. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        '404.jsx': 'Custom 404 error page. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        '_app.jsx': 'Custom App component. Used to initialize pages. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'register.jsx': 'User registration page. Imports RegisterForm component. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'login.jsx': 'User login page. Imports LoginForm component. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'mindmap': {            '[id].jsx': 'Dynamic route for individual mind maps. use tailwind for styling with refrence to provided tailwind page example Language: JSX.'        },        'shared': {            '[id].jsx': 'Dynamic route for shared mind maps. use tailwind for styling with refrence to provided tailwind page example Language: JSX.'        },        'passwordReset.jsx': 'Page to reset the user's password. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'dashboard.jsx': 'Dashboard page that shows the user's mindmaps. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'profile.jsx': 'User profile page. use tailwind for styling with refrence to provided tailwind page example Language: JSX.'    },    'components': {        'Header.jsx': 'Header component. Displayed on all pages. Contains navigation links. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'Footer.jsx': 'Footer component. Displayed on all pages. Contains information about the app/company. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'Loader.jsx': 'Loader component. Displayed while data is being fetched. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'FormField.jsx': 'Reusable form field component. Used in all form components. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'Dialog.jsx': 'Reusable dialog component. Used for confirming actions like deleting a node. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'LoginForm.jsx': 'Form for user login. Imports useForm custom hook. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'RegisterForm.jsx': 'Form for user registration. Imports useForm custom hook. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',        'mindmap': {            'MindMap.jsx': 'Main MindMap component. Imports useMindMap custom hook and Node component. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',            'Node.jsx': 'Individual node in the mind map. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',            'NodeControls.jsx': 'Component for controlling (add, remove, link) nodes in the mind map. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',            'NodeContextMenu.jsx': 'Context menu component. Displayed on right-click on a node. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',            'MindMapControls.jsx': 'Component for controlling the whole mind map (add, remove, share). use tailwind for styling with refrence to provided tailwind page example Language: JSX.'        },        'profile': {            'ProfileCard.jsx': 'Component showing user profile details. use tailwind for styling with refrence to provided tailwind page example Language: JSX.',            'ProfileEditForm.jsx': 'Form component for editing profile details. use tailwind for styling with refrence to provided tailwind page example Language: JSX.'        }    },    'hooks': {        'useMindMap.js': 'Custom hook for managing mind map state and actions. Language: JavaScript.',        'useUser.js': 'Custom hook for managing user state and actions. Language: JavaScript.',        'useForm.js': 'Custom hook for managing form states and validations. Language: JavaScript.'    },    'styles': {        'globals.css': 'Global CSS styles for the app. Language: CSS.',        'header.module.css': 'CSS Module for Header component. Language: CSS.',        'footer.module.css': 'CSS Module for Footer component. Language: CSS.',        'loader.module.css': 'CSS Module for Loader component. Language: CSS.',        'dialog.module.css': 'CSS Module for Dialog component. Language: CSS.',        'formField.module.css': 'CSS Module for FormField component. Language: CSS.'    },    'utils': {        'api.js': 'Utility functions for making API requests. Language: JavaScript.',        'auth.js': 'Utility functions for authentication (login, logout, register, password reset). Language: JavaScript.',        'validations.js': 'Utility functions for form validations. Language: JavaScript.'    },    'store': {        'index.js': 'Redux store setup file. Language: JavaScript.',        'slice': {            'mindmapSlice.js': 'Redux slice for mind map related actions and reducers. Language: JavaScript.',            'userSlice.js': 'Redux slice for user related actions and reducers. Language: JavaScript.'        },        'asyncActions': {            'userAsyncActions.js': 'Async actions for user-related tasks using createAsyncThunk. Language: JavaScript.',            'mindmapAsyncActions.js': 'Async actions for mindmap-related tasks using createAsyncThunk. Language: JavaScript.'        }    },    'tests': {        'hooks': {            'useMindMap.test.js': 'Tests for the useMindMap custom hook. Language: JavaScript.',            'useUser.test.js': 'Tests for the useUser custom hook. Language: JavaScript.'        },        'components': {            'header.test.js': 'Tests for the Header component. Language: JavaScript.',            'footer.test.js': 'Tests for the Footer component. Language: JavaScript.','loader.test.js': 'Tests for the Loader component. Language: JavaScript.'        }    },    'package.json': 'Project metadata and dependency list',    'package-lock.json': 'Automatically generated file for locking the versions of the project's dependencies',    '.gitignore': 'Specifies which files and directories to ignore in Git',    'README.md': 'Documentation for the project'},'backend': {    'src': {        'api': {'controllers': {'userController.js': 'Manages user actions (registration, login, etc.). Imports 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'registerUser', 'loginUser', 'resetPassword'. Exports functions for use in 'userRoutes.js'. Language: JavaScript.','diagramController.js': 'Manages diagram actions. Imports 'pool' from '../config/db' and 'gpt4API.js' from '../../services'. Contains functions 'createDiagram', 'getDiagram', 'updateDiagram', 'deleteDiagram'. Exports functions for use in 'diagramRoutes.js'. Language: JavaScript.','nodeController.js': 'Manages node actions. Imports 'pool' from '../config/db'. Contains functions 'createNode', 'getNode', 'updateNode', 'deleteNode'. Exports functions for use in 'nodeRoutes.js'. Language: JavaScript.','instructionController.js': 'Manages instruction actions. Imports 'pool' from '../config/db'. Contains functions 'createInstruction', 'getInstruction', 'updateInstruction', 'deleteInstruction'. Exports functions for use in 'instructionRoutes.js'. Language: JavaScript.','avatarController.js': 'Manages avatar creation. Imports 'pool' from '../config/db' to use pg to query avatars postgresql table. Contains functions 'createAvatar', 'getAvatar'. Exports functions for use in 'avatarRoutes.js'. Language: JavaScript.','jobController.js': 'Manages jobs and queues. Imports 'redis.js' from '../../services' and 'jobModel.js' from '../models'. Contains functions 'createJob', 'getJob', 'updateJob', 'deleteJob'. Exports functions for use in 'jobRoutes.js'. Language: JavaScript.','registerController.js': 'Handles user registration. Imports 'pool' from '../config/db' and 'jwtUtils.js' from '../../utils'. Contains functions 'postRegister'. Exports functions for use in 'userRoutes.js'. Language: JavaScript.','authController.js': 'Manages authentication. Imports 'pool' from '../config/db' and 'jwtUtils.js' from '../../utils'. Contains functions 'postLogin', 'postLogout'. Exports functions for use in 'authRoutes.js'. Language: JavaScript.','errorController.js': 'Manages error handling. Contains function 'handleError'. Exports function for use in 'errorMiddleware.js'. Language: JavaScript.','emailController.js': 'Manages email sending. Contains function 'sendEmail','updateEmail','deleteEmail'. Exports function for use in 'jobController.js'. Language: JavaScript.','nodeController.js': 'Manages node actions. Imports 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'createNode', 'getNode', 'updateNode', 'deleteNode'. Exports functions for use in 'nodeRoutes.js'. Language: JavaScript.'},'middleware': {'errorMiddleware.js': 'Handles errors. Imports 'errorController.js' from '../controllers'. Contains function 'handleError'. Exports function for use in 'app.js'. Language: JavaScript.','successMiddleware.js': 'Handles success responses. Imports 'successController.js' from '../controllers'. Contains function 'handleSuccess'. Exports function for use in 'app.js'. used to unify successful responses . Language: JavaScript.','authMiddleware.js': 'Handles authentication. Imports 'jwtUtils.js' from '../utils'. Contains function 'verifyToken'. Exports function for use in 'app.js'. Language: JavaScript.','loggerMiddleware.js': 'Handles logging. Imports 'morgan' from 'morgan'. Contains function 'logger'. Exports function for use in 'app.js'. Language: JavaScript.','corsMiddleware.js': 'Handles CORS. Imports 'cors' from 'cors'. Contains function 'cors'. Exports function for use in 'app.js'. Language: JavaScript.','helmetMiddleware.js': 'Handles security. Imports 'helmet' from 'helmet'. Contains function 'helmet'. Exports function for use in 'app.js'. Language: JavaScript.'},'routes': {'userRoutes.js': 'Defines routes for user actions. Imports express.Router from 'express' and 'userController.js' from '../controllers'. Contains route definitions '/user/register' (POST), '/user/login' (POST), '/user/resetPassword' (POST). Exports router for use in 'app.js'. Language: JavaScript.','diagramRoutes.js': 'Defines routes for diagram actions. Imports express.Router from 'express' and 'diagramController.js' from '../controllers'. Contains route definitions '/diagram/create' (POST), '/diagram/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'. Language: JavaScript.','instructionRoutes.js': 'Defines routes for instruction actions. Imports express.Router from 'express' and 'instructionController.js' from '../controllers'. Contains route definitions '/instruction/create' (POST), '/instruction/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'. Language: JavaScript.','avatarRoutes.js': 'Defines routes for avatar actions. Imports express.Router from 'express' and 'avatarController.js' from '../controllers'. Contains route definitions '/avatar/create' (POST), '/avatar/:id' (GET). Exports router for use in 'app.js'. Language: JavaScript.','jobRoutes.js': 'Defines routes for job actions. Imports express.Router from 'express' and 'jobController.js' from '../controllers'. Contains route definitions '/job/create' (POST), '/job/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'. Language: JavaScript.','authRoutes.js': 'Defines routes for authentication actions. Imports express.Router from 'express' and 'authController.js' from '../controllers'. Contains route definitions '/auth/login' (POST), '/auth/logout' (POST). Exports router for use in 'app.js'. Language: JavaScript.','index.js': ' Defines routes for all actions. Imports express.Router from 'express' and all routes from './routes'. Contains route definitions for all routes. Exports router for use in 'app.js'. Language: JavaScript.'}    },        'utils': {'gpt4API.js': 'Handles interactions with the GPT-4 API. Contains functions 'generateInstructions', 'generateDiagram', 'generateSequenceDiagram'. Used in 'diagramController.js'. Language: JavaScript.','avatarAPI.js': 'Handles interactions with the avatar generation API. Contains function 'generateAvatar'. Used in 'avatarController.js'. Language: JavaScript.','redis.js': 'Sets up interactions with Redis for job queuing. Contains functions 'createJob', 'getJob', 'updateJob', 'deleteJob'. Used in '../api/controllers/jobController.js'. Language: JavaScript.','jwtUtils.js': 'Handles JWT authentication. Contains functions 'generateToken', 'verifyToken'. Used in '../api/controllers/authController.js'. Language: JavaScript.','errorHandler.js': 'Handles errors. Contains function 'handleError'. Used in '../api/middleware/errorMiddleware.js'. Language: JavaScript.','successHandler.js': 'Handles success responses. Contains function 'handleSuccess'. Used in '../api/middleware/successMiddleware.js' . Language: JavaScript.','apiUtils.js': 'This file contains utility functions for handling API requests and responses. Exports functions like handleSuccess(), handleFailure().','databaseUtils.js': 'This file contains utility functions for interacting with the database. Exports functions like connectDB(), closeDB().','imageStorageService.js': 'This file contains utility functions for interacting with the image storage service. Exports functions like uploadImage(), deleteImage(). Handles image storage. Used in avatarController.js'},'config': {'db.js': 'Configuration file for setting up the database using node-postgres. Contains a function to initialize and connect to the database using .env variables. Language: JavaScript.'        },        'app.js': 'The main application file. Imports 'express' from 'express', 'cors' from 'cors', 'morgan' from 'morgan', 'helmet' from 'helmet', and all routes from './routes'. Sets up middleware and routes, and starts the server. Language: JavaScript.'    },    'package.json': 'Describes the app and its dependencies. Lists all packages and scripts needed to run the project. Language: JSON.',    'README.md': 'Provides information about the project including: project description, features, installation instructions, usage examples, API documentation, and license information. Contains a sequence diagram of backend and front-end interactions. Language: Markdown.','.env': 'Contains environment variables. db keys, gpt4API. Language: Text.','.gitignore': 'Contains files and folders to be ignored by git. Language: Text.',        'Dockerfile': 'Contains instructions for building the Docker image. Language: Text.','docker-compose.yml': 'Contains instructions for running the Docker image. Language: Text.'}",
      "Features include real-time collaboration, various diagram types, user authentication, sharing capabilities, and notifications.",
      "specs: 1. **API Specs:** Use OpenAPI format. Endpoint `/api/register` (POST) - Expects: `{email, password}`, Returns: `{jwt}`. Endpoint `/api/diagram` (POST) - Expects: `{jwt, diagramData}`, Returns: `{status, diagramData}`. 2. **Auth:** JWT based authentication. User roles: 'admin', 'user'. 'Admin' has all permissions, 'user' can create/edit own diagrams, view shared diagrams. 3. **Error Handling:** Application employs try-catch logic. On failure, errors are logged server-side and a generic error message is returned to the client. 4. **Business Rules:** Nodes creation limited to 100 per user. Instructions priority determined by user at creation, can be adjusted later. Nodes are only editable by the creator user. 5. **Tech Stack:** Frontend - Nextjs, tailwind, redux rtk query, react-flow , Backend - Node.js with Express, Database - PostgreSQL, Avatar API - Python Flask, Job Queue - Redis, Storage - AWS S3. 6. **Test Cases:** Unit tests for each API endpoint. Integration test for user registration-login-diagram creation flow. End-to-end tests for user journeys.",
      "sequenceDiagram     autonumber     actor U as User     participant F as Frontend     participant B as Backend     participant D as Database     participant AI as GPT-4     participant S as Image Storage     participant Redis as Redis Job Queue     participant A as Avatar Creation API     U->>F: Inputs email and password     F->>B: Sends registration request     B->>D: Saves user data     D-->>B: Acknowledges save     B-->>F: Sends JWT     U->>F: Inputs diagram data <br> persona description and diagram description     F->>B: Sends diagram creation request     B->>AI: Sends persona description     AI->>B: Return processed description & features for avatar     B->>A: Send processed description to Avatar API     A->>B: Return generated avatar image     B->>S: Store generated avatar image     S->>B: Confirm storage and return image location     B->>D: Saves diagram and avatar image     D-->>B: Acknowledges save     B->>AI: Sends diagram description     AI-->>B: Returns initial diagram     B->>D: Saves diagram     D-->>B: Acknowledges save     B-->>F: Returns initial diagram and avatar image link     U->>F: Create multiple nodes in diagram     Note over F: Display nodes as loading     F->>B: Send batch request for node creation     B->>AI: Forward request to GPT-4     AI-->>B: Return instructions for nodes     B-->>F: Return created nodes data     Note over F: Update nodes with returned data     F->>U: Display updated nodes in diagram     U->>F: Inputs new node prompt     F->>B: Sends node addition request     B->>AI: Sends node prompt     AI-->>B: Returns new node     B->>D: Updates diagram     D-->>B: Acknowledges update     B-->>F: Returns updated diagram     U->>F: Edit or cancel the nodes/jobs in the diagram     F->>B: Sends edit or cancel request     B->>Redis: Modify or cancel the jobs in the queue     Redis-->>B: Acknowledges modification/cancellation     B-->>F: Returns updated status to Frontend     U->>F: Shares diagram     F->>B: Sends sharing request     B->>D: Updates sharing settings     D-->>B: Acknowledges update     B-->>F: Returns updated sharing settings     F->>B: Request to execute Diagram     B->>D: Fetch Diagram     B->>B: Translate Diagram to sequence of Instructions     loop Each Instruction         B->>D: Fetch Instruction details         B->>B: Check type of Instruction         alt If Instruction is to send email or perform immediate action B->>B: Execute Instruction immediately         else If Instruction is to wait for a period of time             B->>Redis: Schedule Job with delay         else If Instruction is to wait until a certain time             B->>Redis: Schedule Job with delay until specific time         end     end     Redis->>B: Trigger Jobs as per the schedule     B->>B: Execute the respective Instruction     loop Each Instruction requiring GPT-4         B->>AI: Send Instruction details         AI->>B: Respond with suggested Instruction     end     B->>F: Send back results/confirmation",
      "The user registers for an account, and all user details, including hashed passwords, are stored in the PostgreSQL database.The user starts a new mind map by describing the persona of the mind map manager. This information is sent to the backend, which uses AI to generate a matching avatar. The avatar data is then sent back to the frontend and displayed to the user.The user provides a description of the mind map and any notes. This information is sent to the backend, which uses AI to generate the initial mind map. The mind map data (as a JSON object) is then sent back to the frontend and displayed to the user.As the user interacts with the mind map, adding nodes, creating links, etc., these changes are sent to the backend and stored in MongoDB. This allows for the mind map to be saved and retrieved in real-time.If the user decides to share the mind map with another user, the backend handles the sharing process by providing a link to the shared mind map or directly sending an invitation to the other user's email address.If the user decides to expand a node using AI, the mind map's current context is sent to the backend, which uses OpenAI GPT to generate the expanded node. The new node(s) is then sent back to the frontend and added to the mind map.The user can also download the full context of the mind map, which is retrieved from the backend.The user can decide to use the stored mind map as a starting point for other diagrams, such as a flow chart or marketing automation diagram.",
      "Table users {  id serial [pk, increment]  username varchar [unique]  email varchar [unique]  password varchar  jwt varchar  created_at timestamp  updated_at timestamp}Table token_black_list {  id serial [pk, increment]  user_id integer  token_id varchar(255)  blacklisted_at timestamp  created_at timestamp  updated_at timestamp}Table diagrams {  id serial [pk, increment]  diagram_data jsonb  name varchar  slug varchar [unique]  description varchar  created_at timestamp  updated_at timestamp  created_by integer  sharing_settings varchar}Table nodes {  id serial [pk, increment]  diagram_id integer  position jsonb  type varchar  data jsonb  created_at timestamp  updated_at timestamp  created_by integer}Table edges {  id serial [pk,increment]  diagram_id integer  source integer  target integer  animated boolean  label varchar}Table node_edge {  id serial [pk, increment]  edge_id integer  node_id integer  created_at timestamp  updated_at timestamp}Table node_instructions {  id serial [pk, increment]  node_id integer  instruction_types_id integer  created_at timestamp  updated_at timestamp  created_by text}Table instruction_types {  id serial [pk,increment]  name varchar  slug varchar [unique]  description varchar  parameters varchar  priority integer  max_retry integer  created_at timestamp  updated_at timestamp  created_by integer}Table diagram_instructions {  id serial [pk, increment]  diagram_id integer  instruction_types_id integer   node_id integer  instruction_order integer  parameters jsonb  created_at timestamp  updated_at timestamp}Table jobs {  id serial [pk,increment]  instruction_types_id integer  diagram_id integer  node_id integer  scheduled_time timestamp  retry_count integer  trigger_time timestamp  created_at timestamp  updated_at timestamp}Table avatars {  id serial [pk,increment]  user_id integer  image_url varchar  created_at timestamp  updated_at timestamp}Table user_roles {  id serial [pk,increment]  user_id integer  role varchar}Table action_logs {  id serial [pk,increment]  user_id integer  action varchar  timestamp timestamp}Table password_resets {  id serial [pk,increment]  user_id integer  reset_token varchar  expiry_time timestamp}Table email_templates {  id serial [pk,increment]  template_name varchar  template_content varchar    created_at timestamp  updated_at timestamp  created_by integer}Table notifications {  id serial [pk,increment]  user_id integer  content varchar  created_at timestamp  is_read boolean} Ref: diagram_instructions.instruction_types_id > instruction_types.id Ref: diagrams.created_by > users.id Ref: instruction_types.created_by > users.id Ref: jobs.instruction_types_id > instruction_types.id Ref: jobs.diagram_id > diagrams.id Ref: avatars.user_id > users.id Ref: user_roles.user_id > users.id Ref: action_logs.user_id > users.id Ref: password_resets.user_id > users.id Ref: notifications.user_id > users.id",
      "You are an experienced full stuck with developer with over 10 years of experience using node JS and nextJS, you are tasked to: Design an ai mind map web app using react-flow and postgresql with the front end in nextjs, tailwind, react redux rtk query , react-flow, and the backend based on Express, node-postgres,  where: - the app has many users, will register via  - the user can start a new mind map, and add new nodes using plus icon. - mind map will start using AI by asking the user to describe the persona of the mind map manager, who should it be, an assistance, expert in a certain field, it will start with default mind map expert assistance ... etc. - after describing the persona ai will generate an avatar adequate to the persona description. and present it in the following interaction. - then will prompt asking about the mind map description - then ai will ask if any notes need to be considered. default just generate ideas. - then Ai will respond with confirmation for understanding the topic, and ask for additional information if necessary.  every question with text field to answer it. or skip them. - the persona, description and the notes  will be used by ai to generate the first mind map. based on a prompt 'use the above to generate a mind map ' - the ai will create a mind map. - user can add new nodes with couple of options (while hovering on the current node buttons will appear):    1. plus icon button that will open a text area field to enter a new prompt that will use full context leading form the (stem) node to current node in addition to the new prompt to generate new mind map nodes as children form the current node. and so on.   2. new nodes limiter set to no-limit as default. and can be increased or decreased to limit the number of created nodes.   3. lamp icon button to generate text ideas.   4. document icon button to generate article node.   5. image icon button to generate an image -  when the user drags a node it will moves with its all children (sub nodes), and when the node hovers over another node, it links automatically to it and become a child node of the hovers over node and relinquish form the previous parent node. - the mind map will be saved and retrived  in mongo db. - the mind map can be shared between users. - the mind map has the ability  to use open ai gpt to read the mind map from the original (stem) node to the current node to under stand the context line on the current node by connecting all previous nodes until the current one, and the previously mentioned button will expand the current node based on that context, with new prompt such 'expand with new topics' or 'expand new ideas' or custom prompt. - ai response will create one new node if is one answer, or many nodes if it contains many points. - every generated node will be in text and mark-down. - cross node connection can be established which will create even bigger context. - on each node there is a button to download the full messages form form start to the current node. to be used as gpt context any where else. - the stored mind map can be used further as a start for creating a flow chart, marketing automation diagram... etc 1. Registration & Authentication: a new system, email/password 2. Persona Description: free text, example 'you are a marketing director with 10 years of experiance in auto mobile industry' 3. AI Avatar Generation:  a cartoon-like image. 4. AI Mind Map Generation:  It will use open ai chatgpt3.5/4 5. AI Node Generation: there will be 2 buttons, the plus that will open a dialog box with text area to insert a prompt describing the new node. the second button is like magic wand to use the liner context until current node to generate the best node. 6. Sharing of Mind Map:  there should be 2 types of maps, Public and privet, the public will be show on a searchable gallery to view and clone. however the private will be shard via invitation only, and one map can be edited by multiple users. 7.Integration with GPT:  yes an option per user to use their API, or if not the App API will be used however that will affect the subscription cost and usage cost. 8. Cross Node Connection:   connection a node and another node that is not a parent node or a child node, it could be a node from very distant sibling, will be presented as dotted line and will connect via a separate port, called cross. 9. Flow Chart/Marketing Automation Diagram: the stored mind map in json format based on react-flow can be used as start or structure to create any other diagram. and other funnctionalies so this app can be a module in a bigger app that uses the ai mind map as starter for other diagrams.. Note: No code implementation is required in this task.  describe the Data Flow, and create a mermaid sequence diagram,",
      "frontend tailwind page example to be used as refrence with pages and components styling: import { Fragment, useState } from 'react'import { Dialog, Menu, Transition } from '@headlessui/react'import {  ArrowDownCircleIcon,  ArrowPathIcon,  ArrowUpCircleIcon,  Bars3Icon,  EllipsisHorizontalIcon,  PlusSmallIcon,} from '@heroicons/react/20/solid'import { BellIcon, XMarkIcon } from '@heroicons/react/24/outline'function classNames(...classes) {  return classes.filter(Boolean).join(' ')}export default function Example() {  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)  return (<>  <header className='absolute inset-x-0 top-0 z-50 flex h-16 border-b border-gray-900/10'><div className='mx-auto flex w-full max-w-7xl items-center justify-between px-4 sm:px-6 lg:px-8'>  <div className='flex flex-1 items-center gap-x-6'><button type='button' className='-m-3 p-3 md:hidden' onClick={() => setMobileMenuOpen(true)}>  <span className='sr-only'>Open main menu</span>  <Bars3Icon className='h-5 w-5 text-gray-900' aria-hidden='true' /></button><img  className='h-8 w-auto'  src='https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600'  alt='Your Company'/>  </div>  <nav className='hidden md:flex md:gap-x-11 md:text-sm md:font-semibold md:leading-6 md:text-gray-700'>{navigation.map((item, itemIdx) => (  <a key={itemIdx} href={item.href}>{item.name}  </a>))}  </nav>  <div className='flex flex-1 items-center justify-end gap-x-8'><button type='button' className='-m-2.5 p-2.5 text-gray-400 hover:text-gray-500'>  <span className='sr-only'>View notifications</span>  <BellIcon className='h-6 w-6' aria-hidden='true' /></button><a href='#' className='-m-1.5 p-1.5'>  <span className='sr-only'>Your profile</span>  <imgclassName='h-8 w-8 rounded-full bg-gray-800'src='https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'alt='  /></a>  </div></div><Dialog as='div' className='lg:hidden' open={mobileMenuOpen} onClose={setMobileMenuOpen}>  <div className='fixed inset-0 z-50' />  <Dialog.Panel className='fixed inset-y-0 left-0 z-50 w-full overflow-y-auto bg-white px-4 pb-6 sm:max-w-sm sm:px-6 sm:ring-1 sm:ring-gray-900/10'><div className='-ml-0.5 flex h-16 items-center gap-x-6'>  <button type='button' className='-m-2.5 p-2.5 text-gray-700' onClick={() => setMobileMenuOpen(false)}><span className='sr-only'>Close menu</span><XMarkIcon className='h-6 w-6' aria-hidden='true' />  </button>  <div className='-ml-0.5'><a href='#' className='-m-1.5 block p-1.5'>  <span className='sr-only'>Your Company</span>  <imgclassName='h-8 w-auto'src='https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600'alt='  /></a>  </div></div><div className='mt-2 space-y-2'>  {navigation.map((item) => (<a  key={item.name}  href={item.href}  className='-mx-3 block rounded-lg px-3 py-2 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50'>  {item.name}</a>  ))}</div>  </Dialog.Panel></Dialog>  </header>  <main><div className='relative isolate overflow-hidden pt-16'>  {/* Secondary navigation */}  <header className='pb-4 pt-6 sm:pb-6'><div className='mx-auto flex max-w-7xl flex-wrap items-center gap-6 px-4 sm:flex-nowrap sm:px-6 lg:px-8'>  <h1 className='text-base font-semibold leading-7 text-gray-900'>Cashflow</h1>  <div className='order-last flex w-full gap-x-8 text-sm font-semibold leading-6 sm:order-none sm:w-auto sm:border-l sm:border-gray-200 sm:pl-6 sm:leading-7'>{secondaryNavigation.map((item) => (  <a key={item.name} href={item.href} className={item.current ? 'text-indigo-600' : 'text-gray-700'}>{item.name}  </a>))}  </div>  <ahref='#'className='ml-auto flex items-center gap-x-1 rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600'  ><PlusSmallIcon className='-ml-1.5 h-5 w-5' aria-hidden='true' />New invoice  </a></div>  </header>  {/* Stats */}  <div className='border-b border-b-gray-900/10 lg:border-t lg:border-t-gray-900/5'><dl className='mx-auto grid max-w-7xl grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 lg:px-2 xl:px-0'>  {stats.map((stat, statIdx) => (<div  key={stat.name}  className={classNames(statIdx % 2 === 1 ? 'sm:border-l' : statIdx === 2 ? 'lg:border-l' : '','flex items-baseline flex-wrap justify-between gap-y-2 gap-x-4 border-t border-gray-900/5 px-4 py-10 sm:px-6 lg:border-t-0 xl:px-8'  )}>  <dt className='text-sm font-medium leading-6 text-gray-500'>{stat.name}</dt>  <ddclassName={classNames(  stat.changeType === 'negative' ? 'text-rose-600' : 'text-gray-700',  'text-xs font-medium')}  >{stat.change}  </dd>  <dd className='w-full flex-none text-3xl font-medium leading-10 tracking-tight text-gray-900'>{stat.value}  </dd></div>  ))}</dl>  </div>  <divclassName='absolute left-0 top-full -z-10 mt-96 origin-top-left translate-y-40 -rotate-90 transform-gpu opacity-20 blur-3xl sm:left-1/2 sm:-ml-96 sm:-mt-10 sm:translate-y-0 sm:rotate-0 sm:transform-gpu sm:opacity-50'aria-hidden='true'  ><div  className='aspect-[1154/678] w-[72.125rem] bg-gradient-to-br from-[#FF80B5] to-[#9089FC]'  style={{clipPath:  'polygon(100% 38.5%, 82.6% 100%, 60.2% 37.7%, 52.4% 32.1%, 47.5% 41.8%, 45.2% 65.6%, 27.5% 23.4%, 0.1% 35.3%, 17.9% 0%, 27.7% 23.4%, 76.2% 2.5%, 74.2% 56%, 100% 38.5%)',  }}/>  </div></div><div className='space-y-16 py-16 xl:space-y-20'>  {/* Recent activity table */}  <div><div className='mx-auto max-w-7xl px-4 sm:px-6 lg:px-8'>  <h2 className='mx-auto max-w-2xl text-base font-semibold leading-6 text-gray-900 lg:mx-0 lg:max-w-none'>Recent activity  </h2></div><div className='mt-6 overflow-hidden border-t border-gray-100'>  <div className='mx-auto max-w-7xl px-4 sm:px-6 lg:px-8'><div className='mx-auto max-w-2xl lg:mx-0 lg:max-w-none'>  <table className='w-full text-left'><thead className='sr-only'>  <tr><th>Amount</th><th className='hidden sm:table-cell'>Client</th><th>More details</th>  </tr></thead><tbody>  {days.map((day) => (<Fragment key={day.dateTime}>  <tr className='text-sm leading-6 text-gray-900'><th scope='colgroup' colSpan={3} className='relative isolate py-2 font-semibold'>  <time dateTime={day.dateTime}>{day.date}</time>  <div className='absolute inset-y-0 right-full -z-10 w-screen border-b border-gray-200 bg-gray-50' />  <div className='absolute inset-y-0 left-0 -z-10 w-screen border-b border-gray-200 bg-gray-50' /></th>  </tr>  {day.transactions.map((transaction) => (<tr key={transaction.id}>  <td className='relative py-5 pr-6'><div className='flex gap-x-6'>  <transaction.iconclassName='hidden h-6 w-5 flex-none text-gray-400 sm:block'aria-hidden='true'  />  <div className='flex-auto'><div className='flex items-start gap-x-3'>  <div className='text-sm font-medium leading-6 text-gray-900'>{transaction.amount}  </div>  <divclassName={classNames(  statuses[transaction.status],  'rounded-md py-1 px-2 text-xs font-medium ring-1 ring-inset')}  >{transaction.status}  </div></div>{transaction.tax ? (  <div className='mt-1 text-xs leading-5 text-gray-500'>{transaction.tax} tax</div>) : null}  </div></div><div className='absolute bottom-0 right-full h-px w-screen bg-gray-100' /><div className='absolute bottom-0 left-0 h-px w-screen bg-gray-100' />  </td>  <td className='hidden py-5 pr-6 sm:table-cell'><div className='text-sm leading-6 text-gray-900'>{transaction.client}</div><div className='mt-1 text-xs leading-5 text-gray-500'>{transaction.description}</div>  </td>  <td className='py-5 text-right'><div className='flex justify-end'>  <ahref={transaction.href}className='text-sm font-medium leading-6 text-indigo-600 hover:text-indigo-500'  >View<span className='hidden sm:inline'> transaction</span><span className='sr-only'>  , invoice #{transaction.invoiceNumber}, {transaction.client}</span>  </a></div><div className='mt-1 text-xs leading-5 text-gray-500'>  Invoice <span className='text-gray-900'>#{transaction.invoiceNumber}</span></div>  </td></tr>  ))}</Fragment>  ))}</tbody>  </table></div>  </div></div>  </div>  {/* Recent client list*/}  <div className='mx-auto max-w-7xl px-4 sm:px-6 lg:px-8'><div className='mx-auto max-w-2xl lg:mx-0 lg:max-w-none'>  <div className='flex items-center justify-between'><h2 className='text-base font-semibold leading-7 text-gray-900'>Recent clients</h2><a href='#' className='text-sm font-semibold leading-6 text-indigo-600 hover:text-indigo-500'>  View all<span className='sr-only'>, clients</span></a>  </div>  <ul role='list' className='mt-6 grid grid-cols-1 gap-x-6 gap-y-8 lg:grid-cols-3 xl:gap-x-8'>{clients.map((client) => (  <li key={client.id} className='overflow-hidden rounded-xl border border-gray-200'><div className='flex items-center gap-x-4 border-b border-gray-900/5 bg-gray-50 p-6'>  <imgsrc={client.imageUrl}alt={client.name}className='h-12 w-12 flex-none rounded-lg bg-white object-cover ring-1 ring-gray-900/10'  />  <div className='text-sm font-medium leading-6 text-gray-900'>{client.name}</div>  <Menu as='div' className='relative ml-auto'><Menu.Button className='-m-2.5 block p-2.5 text-gray-400 hover:text-gray-500'>  <span className='sr-only'>Open options</span>  <EllipsisHorizontalIcon className='h-5 w-5' aria-hidden='true' /></Menu.Button><Transition  as={Fragment}  enter='transition ease-out duration-100'  enterFrom='transform opacity-0 scale-95'  enterTo='transform opacity-100 scale-100'  leave='transition ease-in duration-75'  leaveFrom='transform opacity-100 scale-100'  leaveTo='transform opacity-0 scale-95'>          <Menu.Items className='absolute right-0 z-10 mt-0.5 w-32 origin-top-right rounded-md bg-white py-2 shadow-lg ring-1 ring-gray-900/5 focus:outline-none'>            <Menu.Item>              {({ active }) => (<a  href='#'  className={classNames(    active ? 'bg-gray-50' : '',    'block px-3 py-1 text-sm leading-6 text-gray-900'  )}>  View<span className='sr-only'>, {client.name}</span></a>              )}            </Menu.Item>            <Menu.Item>              {({ active }) => (<a  href='#'  className={classNames(    active ? 'bg-gray-50' : '',    'block px-3 py-1 text-sm leading-6 text-gray-900'  )}>  Edit<span className='sr-only'>, {client.name}</span></a>              )}            </Menu.Item>          </Menu.Items>        </Transition>      </Menu>    </div>    <dl className='-my-3 divide-y divide-gray-100 px-6 py-4 text-sm leading-6'>      <div className='flex justify-between gap-x-4 py-3'><dt className='text-gray-500'>Last invoice</dt><dd className='text-gray-700'><time dateTime={client.lastInvoice.dateTime}>{client.lastInvoice.date}</time></dd>      </div>      <div className='flex justify-between gap-x-4 py-3'><dt className='text-gray-500'>Amount</dt><dd className='flex items-start gap-x-2'>  <div className='font-medium text-gray-900'>{client.lastInvoice.amount}</div>  <div    className={classNames(      statuses[client.lastInvoice.status],      'rounded-md py-1 px-2 text-xs font-medium ring-1 ring-inset'    )}  >    {client.lastInvoice.status}  </div></dd>      </div>    </dl>  </li>))}      </ul>    </div>  </div></div>      </main>    </>  )}",
      "backenc route controller example to be used as refrence when creating route controllers: const { pool } = require('../../config/db');/** * Creates a new diagram. * @param {Object} req - The request object. * @param {Object} res - The response object. * @returns {Object} - The created diagram. */const createDiagram = async (req, res, next) => {   try {      const { userId } = req.user;      const diagramData = req.body;      if (!diagramData || !diagramData.data || !diagramData.name || !diagramData.slug || !diagramData.description || !diagramData.sharing_settings) throw { message: 'Diagram data, name, slug, description, and sharing settings are required', statusCode: 400 };      if (!userId || !diagramData.created_by) throw { message: 'User ID is required', statusCode: 400 };      const query = {         text: 'INSERT INTO diagrams(diagram_data, name, slug, description, created_at, updated_at, created_by, sharing_settings) VALUES($1, $2, $3, $4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, $5, $6) RETURNING *',         values: [JSON.stringify(diagramData.data), diagramData.name, diagramData.slug, diagramData.description, userId, diagramData.sharing_settings],      };      const result = await pool.query(query);      const diagram = result.rows[0];      res.data = diagram;      res.statusCode = 201;      res.message = 'Diagram created successfully!';      next()   } catch (error) {      next(error);   }};/** * Retrieves a diagram by its ID. * @param {Object} req - The request object. * @param {Object} res - The response object. * @returns {Object} - The retrieved diagram. */const getDiagramById = async (req, res, next) => {   try {      const { id } = req.params      if (!id) throw { message: 'Diagram ID is required', statusCode: 400 };      const query = {         text: 'SELECT * FROM diagrams WHERE id = $1',         values: [id],      };      const result = await pool.query(query);      const diagram = result.rows[0];      if (!diagram) throw { message: 'Diagram not found', statusCode: 404 };      res.data = diagram;      res.statusCode = 200;      res.message = `Diagram with id:${id}, retrieved successfully!`;      next()   } catch (error) {      next(error);   }}/** * Retrieves all diagrams. * @param {Object} req - The request object. * @param {Object} res - The response object. * @param {Function} next - The next middleware function. * @returns {Object} - The retrieved diagram. */const getAllDiagrams = async (req, res, next) => {   try {      const page = parseInt(req.query.page) || 1;  // set default page to 1 if it's not available      const limit = parseInt(req.query.limit) || 20;  // set default limit to 20 if it's not available      const offset = (page - 1) * limit;      const result = await pool.query('SELECT COUNT(*) OVER() as total, * FROM diagrams ORDER BY id LIMIT $1 OFFSET $2', [limit, offset]);      const diagrams = result.rows;      if (!diagrams.length) throw { message: 'No diagrams found', statusCode: 404 };      // Calculate total pages      const totalPages = Math.ceil(diagrams[0].total / limit);      // Construct a pagination object      const pagination = {         totalItems: Number(diagrams[0].total),         currentPage: page,         pageSize: limit,         totalPages: totalPages,         nextPage: page < totalPages ? page + 1 : null,         prevPage: page > 1 ? page - 1 : null      }      // Remove total from the results      diagrams.map(diagram => delete diagram.total);      res.data = {         pagination: pagination,         results: nodes      }      res.statusCode = 200;      res.message = `${pagination.totalItems} diagrams retrieved successfully!`;      next()   } catch (error) {      next(error);   }}/** * Updates a diagram by its ID. * @param {Object} req - The request object. * @param {Object} res - The response object. * @returns {Object} - The updated diagram. */const updateDiagramById = async (req, res, next) => {   try {      const { id } = req.params;      const { ...fieldsToUpdate } = req.body;      if (!id) throw { message: 'Diagram ID is required', statusCode: 400 };      // Construct the update query dynamically      let updateStatement = 'UPDATE diagrams SET';      const values = [];      let valueIndex = 1;      for (const [key, value] of Object.entries(fieldsToUpdate)) {         updateStatement += ` ${key} = $${valueIndex},`;         values.push(value);         valueIndex++;      }      // Add updated_at manually if it's not already included      if (!fieldsToUpdate.hasOwnProperty('updated_at')) {         updateStatement += ` updated_at = CURRENT_TIMESTAMP,`;      }      // Remove trailing comma and append the WHERE clause      updateStatement = updateStatement.slice(0, -1);      updateStatement += ` WHERE id = $${valueIndex} RETURNING *`;      values.push(id);      const result = await pool.query({         text: updateStatement,         values: values,      });      const diagram = result.rows[0];      if (!diagram) {         throw { message: 'Diagram not found', statusCode: 404 };      }      res.data = diagram;      res.statusCode = 200;      res.message = `Diagram with id:${id}, updated successfully!`;      next()   } catch (error) {      next(error)   }}/** * Deletes a diagram by its ID. * @param {Object} req - The request object. * @param {Object} res - The response object. * @returns {Object} - The deleted diagram. */const deleteDiagramById = async (req, res, next) => {   try {      const { id } = req.params      if (!id) throw { message: 'Diagram ID is required', statusCode: 400 };      const query = {         text: 'DELETE FROM diagrams WHERE id = $1 RETURNING *',         values: [id],      };      const result = await pool.query(query);      const diagram = result.rows[0];      if (!diagram) throw { message: 'Diagram not found', statusCode: 404 };      res.message = `Diagram ${diagram.name} deleted successfully`      res.statusCode = 200;      next()   } catch (error) {      next(error)   }}module.exports = {   createDiagram,   getDiagramById,   getAllDiagrams,   updateDiagramById,   deleteDiagramById,}",
      "backend route example to be used as a refrence when creating routes: const express = require('express');const router = express.Router();const authController = require('../controllers/authController');/** * @swagger * tags: *   name: Authentication *   description: Authentication endpoints *//** * @swagger * /auth/login: *   post: *     summary: User login *     tags: [Authentication] *     requestBody: *       required: true *       content: *         application/json: *           schema: *             type: object *             properties: *               email: *                 type: string *               password: *                 type: string *     responses: *       200: *         description: Login successful *         content: *           application/json: *             schema: *               type: object *               properties: *                 token: *                   type: string *       400: *         description: Invalid request body *       401: *         description: Invalid credentials *       500: *         description: Internal server error */router.post('/auth/login', authController.loginUser);/** * @swagger * /auth/logout: *   post: *     summary: User logout *     tags: [Authentication] *     responses: *       200: *         description: Logout successful *       500: *         description: Internal server error */router.post('/auth/logout', authController.logoutUser);module.exports = router;"
   ],
   "folderStructure": {
      "mind-flow": {
         "frontend": {
            "public": {
               "favicon.ico": "Favicon for the application",
               "manifest.json": "Manifest file for enabling PWA features",
               "robots.txt": "Specifies which parts of the site should be crawled by web crawlers"
            },
            "src": {
               "pages": {
                  "index.jsx": "Home page of the app. Imports Header and Footer components. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "404.jsx": "Custom 404 error page. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "_app.jsx": "Custom App component. Used to initialize pages. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "register.jsx": "User registration page. Imports RegisterForm component. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "login.jsx": "User login page. Imports LoginForm component. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "mindmap": {
                     "[id].jsx": "Dynamic route for individual mind maps. use tailwind for styling with refrence to provided tailwind page example Language: JSX."
                  },
                  "shared": {
                     "[id].jsx": "Dynamic route for shared mind maps. use tailwind for styling with refrence to provided tailwind page example Language: JSX."
                  },
                  "passwordReset.jsx": "Page to reset the user's password. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "dashboard.jsx": "Dashboard page that shows the user's mindmaps. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "profile.jsx": "User profile page. use tailwind for styling with refrence to provided tailwind page example Language: JSX."
               },
               "components": {
                  "Header.jsx": "Header component. Displayed on all pages. Contains navigation links. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "Footer.jsx": "Footer component. Displayed on all pages. Contains information about the app/company. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "Loader.jsx": "Loader component. Displayed while data is being fetched. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "FormField.jsx": "Reusable form field component. Used in all form components. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "Dialog.jsx": "Reusable dialog component. Used for confirming actions like deleting a node. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "LoginForm.jsx": "Form for user login. Imports useForm custom hook. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "RegisterForm.jsx": "Form for user registration. Imports useForm custom hook. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                  "mindmap": {
                     "MindMap.jsx": "Main MindMap component. Imports useMindMap custom hook and Node component. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                     "Node.jsx": "Individual node in the mind map. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                     "NodeControls.jsx": "Component for controlling (add, remove, link) nodes in the mind map. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                     "NodeContextMenu.jsx": "Context menu component. Displayed on right-click on a node. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                     "MindMapControls.jsx": "Component for controlling the whole mind map (add, remove, share). use tailwind for styling with refrence to provided tailwind page example Language: JSX."
                  },
                  "profile": {
                     "ProfileCard.jsx": "Component showing user profile details. use tailwind for styling with refrence to provided tailwind page example Language: JSX.",
                     "ProfileEditForm.jsx": "Form component for editing profile details. use tailwind for styling with refrence to provided tailwind page example Language: JSX."
                  }
               },
               "hooks": {
                  "useMindMap.js": "Custom hook for managing mind map state and actions. Language: JavaScript.",
                  "useUser.js": "Custom hook for managing user state and actions. Language: JavaScript.",
                  "useForm.js": "Custom hook for managing form states and validations. Language: JavaScript."
               },
               "styles": {
                  "globals.css": "Global CSS styles for the app. Language: CSS.",
                  "header.module.css": "CSS Module for Header component. Language: CSS.",
                  "footer.module.css": "CSS Module for Footer component. Language: CSS.",
                  "loader.module.css": "CSS Module for Loader component. Language: CSS.",
                  "dialog.module.css": "CSS Module for Dialog component. Language: CSS.",
                  "formField.module.css": "CSS Module for FormField component. Language: CSS."
               },
               "utils": {
                  "api.js": "Utility functions for making API requests. Language: JavaScript.",
                  "auth.js": "Utility functions for authentication (login, logout, register, password reset). Language: JavaScript.",
                  "validations.js": "Utility functions for form validations. Language: JavaScript."
               },
               "store": {
                  "index.js": "Redux store setup file. Language: JavaScript.",
                  "slice": {
                     "mindmapSlice.js": "Redux slice for mind map related actions and reducers. Language: JavaScript.",
                     "userSlice.js": "Redux slice for user related actions and reducers. Language: JavaScript."
                  },
                  "asyncActions": {
                     "userAsyncActions.js": "Async actions for user-related tasks using createAsyncThunk. Language: JavaScript.",
                     "mindmapAsyncActions.js": "Async actions for mindmap-related tasks using createAsyncThunk. Language: JavaScript."
                  }
               },
               "tests": {
                  "hooks": {
                     "useMindMap.test.js": "Tests for the useMindMap custom hook. Language: JavaScript.",
                     "useUser.test.js": "Tests for the useUser custom hook. Language: JavaScript."
                  },
                  "components": {
                     "header.test.js": "Tests for the Header component. Language: JavaScript.",
                     "footer.test.js": "Tests for the Footer component. Language: JavaScript.",
                     "loader.test.js": "Tests for the Loader component. Language: JavaScript."
                  }
               }
            },
            "package.json": "Project metadata and dependency list",
            "package-lock.json": "Automatically generated file for locking the versions of the project's dependencies",
            ".gitignore": "Specifies which files and directories to ignore in Git",
            "README.md": "Provides information about the project including:project in development, description, features, installation instructions,how to use, usage examples, who is the target user, API documentation, and license information. Contains a sequence diagram of backend and front-end interactions. Language: Markdown."
         },
         "backend": {
            "src": {
               "api": {
                  "controllers": {
                     "userController.js": "Manages user actions (registration, login, getAllUsers, getUserById,updateUser,deleteUser etc.). Imports 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'registerUser', 'loginUser', 'resetPassword'. Exports functions for use in 'userRoutes.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAllUsers refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "diagramController.js": "Manages diagram actions (createDiagram, getDiagramById, getAllDiagrams, updateDiagramById, deleteDiagramById). Imports 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'createDiagram', 'getDiagramById', 'getAllDiagrams', 'updateDiagramById', 'deleteDiagramById'. Exports functions for use in 'diagramRoutes.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAllDiagrams refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "nodeController.js": "Manages node actions (createNode, getNodeById, getAllNodes, updateNodeById, deleteNodeById). Imports 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'createNode', 'getNodeById', 'getAllNodes', 'updateNodeById', 'deleteNodeById'. Exports functions for use in 'nodeRoutes.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAllNodes refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "instructionController.js": "Manages instruction actions (createInstruction, getInstructionById, getAllInstructions, updateInstructionById, deleteInstructionById). Imports 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'createInstruction', 'getInstructionById', 'getAllInstructions', 'updateInstructionById', 'deleteInstructionById'. Exports functions for use in 'instructionRoutes.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAll refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "avatarController.js": "Manages avatar creation actions (createAvatar, getAvatarById, getAllAvatars). Imports 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'createAvatar', 'getAvatarById', 'getAllAvatars'. Exports functions for use in 'avatarRoutes.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAll refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "jobController.js": "Manages jobs and queues. Imports 'redis.js' from '../../services' and 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'createJob', 'getJob', 'getAllJobs', 'updateJob', 'deleteJob'. Exports functions for use in 'jobRoutes.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAll refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "registerController.js": "Handles user registration. Imports 'pool' from '../config/db' and 'jwtUtils.js' from '../../utils'. Contains functions 'postRegister'. Exports functions for use in 'userRoutes.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAll refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "authController.js": "Manages authentication. Imports 'pool' from '../config/db' and 'jwtUtils.js' from '../../utils'. Contains functions 'postLogin', 'postLogout'. Exports functions for use in 'authRoutes.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAll refernce to provided router controller example , and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "errorController.js": "Manages error handling. Contains function 'handleError'. Exports function for use in 'errorMiddleware.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAll refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript.",
                     "emailController.js": "Manages email sending. Contains function 'sendEmail','updateEmail','deleteEmail'. Exports function for use in 'jobController.js'. refrence to provided route controller implementation example. respond with pagination values wiht getAll refernce to provided router controller example, and provide limit and pageNumber in query. response via successMiddleware. error via errorMiddleware.pagination with getAll. Language: JavaScript."
                  },
                  "middleware": {
                     "errorMiddleware.js": "Handles errors. Imports 'errorController.js' from '../controllers'. Contains function 'handleError'. Exports function for use in 'app.js'. Language: JavaScript.",
                     "successMiddleware.js": "Handles success responses. Imports 'successController.js' from '../controllers'. Contains function 'handleSuccess'. Exports function for use in 'app.js'. used to unify successful responses . Language: JavaScript.",
                     "authMiddleware.js": "Handles authentication. Imports 'jwtUtils.js' from '../utils'. Contains function 'verifyToken'. Exports function for use in 'app.js'. Language: JavaScript.",
                     "loggerMiddleware.js": "Handles logging. Imports 'morgan' from 'morgan'. Contains function 'logger'. Exports function for use in 'app.js'. Language: JavaScript.",
                     "corsMiddleware.js": "Handles CORS. Imports 'cors' from 'cors'. Contains function 'cors'. Exports function for use in 'app.js'. Language: JavaScript.",
                     "helmetMiddleware.js": "Handles security. Imports 'helmet' from 'helmet'. Contains function 'helmet'. Exports function for use in 'app.js'. Language: JavaScript."
                  },
                  "routes": {
                     "userRoutes.js": "Defines routes for user actions. Imports express.Router from 'express' and 'userController.js' from '../controllers'. Contains route definitions '/user/register' (POST), '/user/login' (POST), '/user/resetPassword' (POST). Exports router for use in 'app.js'.  pagination with getAllUsers. Language: JavaScript.",
                     "diagramRoutes.js": "Defines routes for diagram actions. Imports express.Router from 'express' and 'diagramController.js' from '../controllers'. Contains route definitions '/diagram/create' (POST), '/diagram/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'.  pagination with getAllDiagrams. Language: JavaScript.",
                     "instructionRoutes.js": "Defines routes for instruction actions. Imports express.Router from 'express' and 'instructionController.js' from '../controllers'. Contains route definitions '/instruction/create' (POST), '/instruction/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'.  pagination with getAllInstructions. Language: JavaScript.",
                     "avatarRoutes.js": "Defines routes for avatar actions. Imports express.Router from 'express' and 'avatarController.js' from '../controllers'. Contains route definitions '/avatar/create' (POST), '/avatar/:id' (GET). Exports router for use in 'app.js'.  pagination with getAllAvatars. Language: JavaScript.",
                     "jobRoutes.js": "Defines routes for job actions. Imports express.Router from 'express' and 'jobController.js' from '../controllers'. Contains route definitions '/job/create' (POST), '/job/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'.  pagination with getAllJobs. Language: JavaScript.",
                     "authRoutes.js": "Defines routes for authentication actions. Imports express.Router from 'express' and 'authController.js' from '../controllers'. Contains route definitions '/auth/login' (POST), '/auth/logout' (POST). Exports router for use in 'app.js'.  pagination with getAllAuths. Language: JavaScript.",
                     "nodeRoutes.js": "Defines routes for node actions. Imports express.Router from 'express' and 'nodeController.js' from '../controllers'. Contains route definitions '/node/create' (POST), '/node/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'.  pagination with getAllNodes. Language: JavaScript.",
                     "emailRoutes.js": "Defines routes for email actions. Imports express.Router from 'express' and 'emailController.js' from '../controllers'. Contains route definitions '/email/create' (POST), '/email/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'.  pagination with getAllEmails. Language: JavaScript.",
                     "index.js": " Defines routes for all actions. Imports express.Router from 'express' and all routes from './routes'. Contains route definitions for all routes. Exports router for use in 'app.js'. Language: JavaScript."
                  }
               },
               "utils": {
                  "gpt4API.js": "Handles interactions with the GPT-4 API. Contains functions 'generateInstructions', 'generateDiagram', 'generateSequenceDiagram'. Used in 'diagramController.js'. Language: JavaScript.",
                  "avatarAPI.js": "Handles interactions with the avatar generation API. Contains function 'generateAvatar'. Used in 'avatarController.js'. Language: JavaScript.",
                  "redis.js": "Sets up interactions with Redis for job queuing. Contains functions 'createJob', 'getJob', 'updateJob', 'deleteJob'. Used in '../api/controllers/jobController.js'. Language: JavaScript.",
                  "jwtUtils.js": "Handles JWT authentication. Contains functions 'generateToken', 'verifyToken'. Used in '../api/controllers/authController.js'. Language: JavaScript.",
                  "errorHandler.js": "Handles errors. Contains function 'handleError'. Used in '../api/middleware/errorMiddleware.js'. Language: JavaScript.",
                  "successHandler.js": "Handles success responses. Contains function 'handleSuccess'. Used in '../api/middleware/successMiddleware.js' . Language: JavaScript.",
                  "apiUtils.js": "This file contains utility functions for handling API requests and responses. Exports functions like handleSuccess(), handleFailure().",
                  "databaseUtils.js": "This file contains utility functions for interacting with the database. Exports functions like connectDB(), closeDB().",
                  "imageStorageService.js": "This file contains utility functions for interacting with the image storage service. Exports functions like uploadImage(), deleteImage(). Handles image storage. Used in avatarController.js"
               },
               "config": {
                  "db.js": "Configuration file for setting up the database using node-postgres. imports pool form 'pg'. connects to postgress. configurs new pool with .env variabls.  Contains a function to initialize and connect to the database using .env variables. Language: JavaScript."
               },
               "app.js": "The main application file. Imports 'express' from 'express', 'cors' from 'cors', 'morgan' from 'morgan', 'helmet' from 'helmet', and all routes from './routes'. errorHandler middleware and successHandler middleware. Sets up middleware and routes, and starts the server. Language: JavaScript."
            },
            "package.json": "Describes the app and its dependencies. Lists all packages and scripts needed to run the project. Language: JSON.",
            "README.md": "Provides information about the project including:project in development, description, features, installation instructions,how to use, usage examples, who is the target user, API documentation, and license information. Contains a sequence diagram of backend and front-end interactions. Language: Markdown.",
            ".env": "Contains environment variables. db keys, gpt4API. Language: Text.",
            ".gitignore": "Contains files and folders to be ignored by git. Language: Text.",
            "Dockerfile": "Contains instructions for building the Docker image. Language: Text.",
            "docker-compose.yml": "Contains instructions for running the Docker image. Language: Text."
         }
      }
   }
}
