{
    "meta": {
        "name": "DiagramApp",
        "seo": {
            "keywords": [
                "diagram",
                "collaboration",
                "realtime",
                "interactive",
                "communication",
                "planning"
            ],
            "title": "Interactive Real-Time Diagramming with DiagramApp",
            "article": "Are you tired of non-interactive, complex diagramming tools that make collaboration a chore rather than a pleasure? How great would it be if there were an application that streamlines the entire process, providing real-time interaction and smooth collaboration? Enter DiagramApp, a solution designed to solve these problems. DiagramApp is a web application that allows users to create, edit and share diagrams in real-time. The right solution for teams seeking to improve communication, planning, and overall productivity. With key benefits such as easy-to-use interface, multi-user collaboration, instant sharing capabilities, and compatibility with various diagram types, DiagramApp is set to revolutionize the way teams interact with diagrams. Stop struggling with subpar tools. Try DiagramApp today for a seamless diagramming experience.",
            "tags": "diagramming, collaboration, realtime, interactive, DiagramApp"
        },
        "description": "DiagramApp is a web application that allows users to create, edit, and share diagrams in real-time.",
        "dependencies": [
            "react",
            "redux",
            "react-flow",
            "nextjs",
            "mongoose",
            "express",
            "jsonwebtoken",
            "tailwindcss",
            "axios"
        ],
        "summary": "A collaborative, real-time diagramming web application.",
        "tags": "diagramming, realtime, collaboration"
    },
    "messages": [
        "DiagramApp is a collaborative, real-time diagramming web application.",
        "npm install react @reduxjs/toolkit react-flow nextjs jsonwebtoken tailwindcss axios postgresql express ",
        "Implementation steps include setting up the frontend with React and Next.js, setting up the backend with Express.js and PostgreSQL, integrating real-time features, and testing.",
        "The frontend includes public assets such as favicon, manifest, and robots.txt files. In the 'src' directory, we have 'components' like App, Header, Footer, LoginForm, RegisterForm, MindMap, AvatarGenerator, NodeForm, NodeButtons, ShareForm, CrossNodeConnection, and FlowChart. The 'pages' directory consists of index, login, register, dashboard, mindmap, flowchart, and sharedMindmap files. The 'redux' directory contains a store.js file, 'slices' such as userSlice, mindmapSlice, and avatarSlice, as well as 'api' services userApi, mindmapApi, and avatarApi. 'Assets' include 'styles' with index.css and tailwind.config.js, and images. The 'utils' directory holds utility files auth.js, mindmap.js, and avatar.js. The application entry point is index.js, with serviceWorker.js for PWA features. There's also package.json, package-lock.json, .gitignore, and README.md for project metadata, dependencies, git exclusions, and documentation respectively.",
        "Features include real-time collaboration, various diagram types, user authentication, sharing capabilities, and notifications.",
        "specs: 1. **API Specs:** Use OpenAPI format. Endpoint `/api/register` (POST) - Expects: `{email, password}`, Returns: `{jwt}`. Endpoint `/api/diagram` (POST) - Expects: `{jwt, diagramData}`, Returns: `{status, diagramData}`. 2. **Auth:** JWT based authentication. User roles: 'admin', 'user'. 'Admin' has all permissions, 'user' can create/edit own diagrams, view shared diagrams. 3. **Error Handling:** Application employs try-catch logic. On failure, errors are logged server-side and a generic error message is returned to the client. 4. **Business Rules:** Nodes creation limited to 100 per user. Instructions priority determined by user at creation, can be adjusted later. Nodes are only editable by the creator user. 5. **Tech Stack:** Frontend - Nextjs, tailwind, redux rtk query, react-flow , Backend - Node.js with Express, Database - PostgreSQL, Avatar API - Python Flask, Job Queue - Redis, Storage - AWS S3. 6. **Test Cases:** Unit tests for each API endpoint. Integration test for user registration-login-diagram creation flow. End-to-end tests for user journeys.",
        "sequenceDiagram     autonumber     actor U as User     participant F as Frontend     participant B as Backend     participant D as Database     participant AI as GPT-4     participant S as Image Storage     participant Redis as Redis Job Queue     participant A as Avatar Creation API     U->>F: Inputs email and password     F->>B: Sends registration request     B->>D: Saves user data     D-->>B: Acknowledges save     B-->>F: Sends JWT     U->>F: Inputs diagram data <br> persona description and diagram description     F->>B: Sends diagram creation request     B->>AI: Sends persona description     AI->>B: Return processed description & features for avatar     B->>A: Send processed description to Avatar API     A->>B: Return generated avatar image     B->>S: Store generated avatar image     S->>B: Confirm storage and return image location     B->>D: Saves diagram and avatar image     D-->>B: Acknowledges save     B->>AI: Sends diagram description     AI-->>B: Returns initial diagram     B->>D: Saves diagram     D-->>B: Acknowledges save     B-->>F: Returns initial diagram and avatar image link     U->>F: Create multiple nodes in diagram     Note over F: Display nodes as loading     F->>B: Send batch request for node creation     B->>AI: Forward request to GPT-4     AI-->>B: Return instructions for nodes     B-->>F: Return created nodes data     Note over F: Update nodes with returned data     F->>U: Display updated nodes in diagram     U->>F: Inputs new node prompt     F->>B: Sends node addition request     B->>AI: Sends node prompt     AI-->>B: Returns new node     B->>D: Updates diagram     D-->>B: Acknowledges update     B-->>F: Returns updated diagram     U->>F: Edit or cancel the nodes/jobs in the diagram     F->>B: Sends edit or cancel request     B->>Redis: Modify or cancel the jobs in the queue     Redis-->>B: Acknowledges modification/cancellation     B-->>F: Returns updated status to Frontend     U->>F: Shares diagram     F->>B: Sends sharing request     B->>D: Updates sharing settings     D-->>B: Acknowledges update     B-->>F: Returns updated sharing settings     F->>B: Request to execute Diagram     B->>D: Fetch Diagram     B->>B: Translate Diagram to sequence of Instructions     loop Each Instruction         B->>D: Fetch Instruction details         B->>B: Check type of Instruction         alt If Instruction is to send email or perform immediate action             B->>B: Execute Instruction immediately         else If Instruction is to wait for a period of time             B->>Redis: Schedule Job with delay         else If Instruction is to wait until a certain time             B->>Redis: Schedule Job with delay until specific time         end     end     Redis->>B: Trigger Jobs as per the schedule     B->>B: Execute the respective Instruction     loop Each Instruction requiring GPT-4         B->>AI: Send Instruction details         AI->>B: Respond with suggested Instruction     end     B->>F: Send back results/confirmation",
        "The user registers for an account, and all user details, including hashed passwords, are stored in the PostgreSQL database.The user starts a new mind map by describing the persona of the mind map manager. This information is sent to the backend, which uses AI to generate a matching avatar. The avatar data is then sent back to the frontend and displayed to the user.The user provides a description of the mind map and any notes. This information is sent to the backend, which uses AI to generate the initial mind map. The mind map data (as a JSON object) is then sent back to the frontend and displayed to the user.As the user interacts with the mind map, adding nodes, creating links, etc., these changes are sent to the backend and stored in MongoDB. This allows for the mind map to be saved and retrieved in real-time.If the user decides to share the mind map with another user, the backend handles the sharing process by providing a link to the shared mind map or directly sending an invitation to the other user's email address.If the user decides to expand a node using AI, the mind map's current context is sent to the backend, which uses OpenAI GPT to generate the expanded node. The new node(s) is then sent back to the frontend and added to the mind map.The user can also download the full context of the mind map, which is retrieved from the backend.The user can decide to use the stored mind map as a starting point for other diagrams, such as a flow chart or marketing automation diagram.",
        "Table users {  id serial [pk, increment]  username varchar [unique]  email varchar [unique]  password varchar  jwt varchar  created_at timestamp  updated_at timestamp}Table token_black_list {  id serial [pk, increment]  user_id integer  token_id varchar(255)  blacklisted_at timestamp  created_at timestamp  updated_at timestamp}Table diagrams {  id serial [pk, increment]  diagram_data jsonb  name varchar  slug varchar [unique]  description varchar  created_at timestamp  updated_at timestamp  created_by integer  sharing_settings varchar}Table nodes {  id serial [pk, increment]  diagram_id integer  position jsonb  type varchar  data jsonb  created_at timestamp  updated_at timestamp  created_by integer}Table edges {  id serial [pk,increment]  diagram_id integer  source integer  target integer  animated boolean  label varchar}Table node_edge {  id serial [pk, increment]  edge_id integer  node_id integer  created_at timestamp  updated_at timestamp}Table node_instructions {  id serial [pk, increment]  node_id integer  instruction_types_id integer  created_at timestamp  updated_at timestamp  created_by text}Table instruction_types {  id serial [pk,increment]  name varchar  slug varchar [unique]  description varchar  parameters varchar  priority integer  max_retry integer  created_at timestamp  updated_at timestamp  created_by integer}Table diagram_instructions {  id serial [pk, increment]  diagram_id integer  instruction_types_id integer   node_id integer  instruction_order integer  parameters jsonb  created_at timestamp  updated_at timestamp}Table jobs {  id serial [pk,increment]  instruction_types_id integer  diagram_id integer  node_id integer  scheduled_time timestamp  retry_count integer  trigger_time timestamp  created_at timestamp  updated_at timestamp}Table avatars {  id serial [pk,increment]  user_id integer  image_url varchar  created_at timestamp  updated_at timestamp}Table user_roles {  id serial [pk,increment]  user_id integer  role varchar}Table action_logs {  id serial [pk,increment]  user_id integer  action varchar  timestamp timestamp}Table password_resets {  id serial [pk,increment]  user_id integer  reset_token varchar  expiry_time timestamp}Table email_templates {  id serial [pk,increment]  template_name varchar  template_content varchar    created_at timestamp  updated_at timestamp  created_by integer}Table notifications {  id serial [pk,increment]  user_id integer  content varchar  created_at timestamp  is_read boolean} Ref: diagram_instructions.instruction_types_id > instruction_types.id Ref: diagrams.created_by > users.id Ref: instruction_types.created_by > users.id Ref: jobs.instruction_types_id > instruction_types.id Ref: jobs.diagram_id > diagrams.id Ref: avatars.user_id > users.id Ref: user_roles.user_id > users.id Ref: action_logs.user_id > users.id Ref: password_resets.user_id > users.id Ref: notifications.user_id > users.id",
        "You are an experienced full stuck with developer with over 10 years of experience using node JS and nextJS, you are tasked to: Design an ai mind map web app using react-flow and postgresql with the front end in nextjs, tailwind, react redux rtk query , react-flow, and the backend based on Express, node-postgres,  where: - the app has many users, will register via  - the user can start a new mind map, and add new nodes using plus icon. - mind map will start using AI by asking the user to describe the persona of the mind map manager, who should it be, an assistance, expert in a certain field, it will start with default mind map expert assistance ... etc. - after describing the persona ai will generate an avatar adequate to the persona description. and present it in the following interaction. - then will prompt asking about the mind map description - then ai will ask if any notes need to be considered. default just generate ideas. - then Ai will respond with confirmation for understanding the topic, and ask for additional information if necessary.  every question with text field to answer it. or skip them. - the persona, description and the notes  will be used by ai to generate the first mind map. based on a prompt 'use the above to generate a mind map ' - the ai will create a mind map. - user can add new nodes with couple of options (while hovering on the current node buttons will appear):    1. plus icon button that will open a text area field to enter a new prompt that will use full context leading form the (stem) node to current node in addition to the new prompt to generate new mind map nodes as children form the current node. and so on.   2. new nodes limiter set to no-limit as default. and can be increased or decreased to limit the number of created nodes.   3. lamp icon button to generate text ideas.   4. document icon button to generate article node.   5. image icon button to generate an image -  when the user drags a node it will moves with its all children (sub nodes), and when the node hovers over another node, it links automatically to it and become a child node of the hovers over node and relinquish form the previous parent node. - the mind map will be saved and retrived  in mongo db. - the mind map can be shared between users. - the mind map has the ability  to use open ai gpt to read the mind map from the original (stem) node to the current node to under stand the context line on the current node by connecting all previous nodes until the current one, and the previously mentioned button will expand the current node based on that context, with new prompt such 'expand with new topics' or 'expand new ideas' or custom prompt. - ai response will create one new node if is one answer, or many nodes if it contains many points. - every generated node will be in text and mark-down. - cross node connection can be established which will create even bigger context. - on each node there is a button to download the full messages form form start to the current node. to be used as gpt context any where else. - the stored mind map can be used further as a start for creating a flow chart, marketing automation diagram... etc 1. Registration & Authentication: a new system, email/password 2. Persona Description: free text, example 'you are a marketing director with 10 years of experiance in auto mobile industry' 3. AI Avatar Generation:  a cartoon-like image. 4. AI Mind Map Generation:  It will use open ai chatgpt3.5/4 5. AI Node Generation: there will be 2 buttons, the plus that will open a dialog box with text area to insert a prompt describing the new node. the second button is like magic wand to use the liner context until current node to generate the best node. 6. Sharing of Mind Map:  there should be 2 types of maps, Public and privet, the public will be show on a searchable gallery to view and clone. however the private will be shard via invitation only, and one map can be edited by multiple users. 7.Integration with GPT:  yes an option per user to use their API, or if not the App API will be used however that will affect the subscription cost and usage cost. 8. Cross Node Connection:   connection a node and another node that is not a parent node or a child node, it could be a node from very distant sibling, will be presented as dotted line and will connect via a separate port, called cross. 9. Flow Chart/Marketing Automation Diagram: the stored mind map in json format based on react-flow can be used as start or structure to create any other diagram. and other funnctionalies so this app can be a module in a bigger app that uses the ai mind map as starter for other diagrams.. Note: No code implementation is required in this task.  describe the Data Flow, and create a mermaid sequence diagram, "
    ],
    "folderStructure": {
        "mind-flow": {
            "frontend": {
                "public": {
                    "favicon.ico": "Favicon for the application",
                    "manifest.json": "Manifest file for enabling PWA features",
                    "robots.txt": "Specifies which parts of the site should be crawled by web crawlers"
                },
                "src": {
                    "components": {
                        "App.jsx": "React component that renders the main application, including the layout, routing, and other core features",
                        "Header.jsx": "React component that displays the header/navigation bar",
                        "Footer.jsx": "React component that displays the footer",
                        "LoginForm.jsx": "React component that handles user login",
                        "RegisterForm.jsx": "React component that handles user registration",
                        "MindMap.jsx": "React component that renders the mind map using React-Flow, also includes the handlers for manipulating the mind map nodes and edges",
                        "AvatarGenerator.jsx": "React component that handles avatar generation",
                        "NodeForm.jsx": "React component that provides an interface to add/edit mind map nodes",
                        "NodeButtons.jsx": "React component that displays the action buttons for a mind map node",
                        "ShareForm.jsx": "React component that handles sharing of mind maps",
                        "CrossNodeConnection.jsx": "React component that handles creating cross node connections",
                        "FlowChart.jsx": "React component that handles conversion of mind maps to flowcharts or marketing automation diagrams"
                    },
                    "pages": {
                        "index.jsx": "The landing page of the application",
                        "login.jsx": "Page for user login",
                        "register.jsx": "Page for user registration",
                        "dashboard.jsx": "User's dashboard page, shows the list of their mind maps",
                        "mindmap.jsx": "Page for creating/editing a mind map",
                        "flowchart.jsx": "Page for creating/editing a flow chart or marketing automation diagram",
                        "sharedMindmap.jsx": "Page for viewing a shared mind map"
                    },
                    "redux": {
                        "store.js": "Redux store, set up with RTK Query",
                        "slices": {
                            "userSlice.js": "Redux slice for handling user-related state, including authentication",
                            "mindmapSlice.js": "Redux slice for handling mind map related state",
                            "avatarSlice.js": "Redux slice for handling avatar related state"
                        },
                        "api": {
                            "userApi.js": "RTK Query API service for user-related API calls",
                            "mindmapApi.js": "RTK Query API service for mindmap-related API calls",
                            "diagramApi.js": "RTK Query API service for diagram-related API calls, ",
                            "avatarApi.js": "RTK Query API service for avatar-related API calls"
                        }
                    },
                    "assets": {
                        "styles": {
                            "index.css": "Main stylesheet file, contains Tailwind directives and custom styles",
                            "tailwind.config.js": "Tailwind CSS configuration file"
                        },
                        "images": "Contains images and icons used in the project"
                    },
                    "utils": {
                        "auth.js": "Contains utility functions for handling authentication",
                        "mindmap.js": "Contains utility functions for handling mind map operations",
                        "avatar.js": "Contains utility functions for handling avatar generation"
                    },
                    "index.js": "Entry point of the application, mounts the React app to the DOM",
                    "serviceWorker.js": "Service worker file for enabling PWA features"
                },
                "package.json": "Project metadata and dependency list",
                "package-lock.json": "Automatically generated file for locking the versions of the project's dependencies",
                ".gitignore": "Specifies which files and directories to ignore in Git",
                "README.md": "Documentation for the project"
            },
            "backend": {
                "src": {
                    "api": {
                        "controllers": {
                            "userController.js": "Manages user actions (registration, login, etc.). Imports 'pool' from '../config/db' to use pg to query respective postgresql table. Contains functions 'registerUser', 'loginUser', 'resetPassword'. Exports functions for use in 'userRoutes.js'. Language: JavaScript.",
                            "diagramController.js": "Manages diagram actions. Imports 'pool' from '../config/db' and 'gpt4API.js' from '../../services'. Contains functions 'createDiagram', 'getDiagram', 'updateDiagram', 'deleteDiagram'. Exports functions for use in 'diagramRoutes.js'. Language: JavaScript.",
                            "nodeController.js": "Manages node actions. Imports 'pool' from '../config/db'. Contains functions 'createNode', 'getNode', 'updateNode', 'deleteNode'. Exports functions for use in 'nodeRoutes.js'. Language: JavaScript.",
                            "instructionController.js": "Manages instruction actions. Imports 'pool' from '../config/db'. Contains functions 'createInstruction', 'getInstruction', 'updateInstruction', 'deleteInstruction'. Exports functions for use in 'instructionRoutes.js'. Language: JavaScript.",
                            "avatarController.js": "Manages avatar creation. Imports 'avatarModel.js' from '../models' and 'avatarAPI.js' from '../../services'. Contains functions 'createAvatar', 'getAvatar'. Exports functions for use in 'avatarRoutes.js'. Language: JavaScript.",
                            "jobController.js": "Manages jobs and queues. Imports 'redis.js' from '../../services' and 'jobModel.js' from '../models'. Contains functions 'createJob', 'getJob', 'updateJob', 'deleteJob'. Exports functions for use in 'jobRoutes.js'. Language: JavaScript.",
                            "registerController.js": "Handles user registration. Imports 'pool' from '../config/db' and 'jwtUtils.js' from '../../utils'. Contains functions 'postRegister'. Exports functions for use in 'userRoutes.js'. Language: JavaScript.",
                            "authController.js": "Manages authentication. Imports 'pool' from '../config/db' and 'jwtUtils.js' from '../../utils'. Contains functions 'postLogin', 'postLogout'. Exports functions for use in 'authRoutes.js'. Language: JavaScript.",
                            "errorController.js": "Manages error handling. Contains function 'handleError'. Exports function for use in 'errorMiddleware.js'. Language: JavaScript.",
                            "emailController.js": "Manages email sending. Contains function 'sendEmail','updateEmail','deleteEmail'. Exports function for use in 'jobController.js'. Language: JavaScript.",
                            "nodeController.js": "Manages node actions. Imports 'nodeModel.js' from '../models'. Contains functions 'createNode', 'getNode', 'updateNode', 'deleteNode'. Exports functions for use in 'nodeRoutes.js'. Language: JavaScript."
                        },
                        "middleware": {
                            "errorMiddleware.js": "Handles errors. Imports 'errorController.js' from '../controllers'. Contains function 'handleError'. Exports function for use in 'app.js'. Language: JavaScript.",
                            "authMiddleware.js": "Handles authentication. Imports 'jwtUtils.js' from '../utils'. Contains function 'verifyToken'. Exports function for use in 'app.js'. Language: JavaScript.",
                            "loggerMiddleware.js": "Handles logging. Imports 'morgan' from 'morgan'. Contains function 'logger'. Exports function for use in 'app.js'. Language: JavaScript.",
                            "corsMiddleware.js": "Handles CORS. Imports 'cors' from 'cors'. Contains function 'cors'. Exports function for use in 'app.js'. Language: JavaScript.",
                            "helmetMiddleware.js": "Handles security. Imports 'helmet' from 'helmet'. Contains function 'helmet'. Exports function for use in 'app.js'. Language: JavaScript."
                        },
                        "routes": {
                            "userRoutes.js": "Defines routes for user actions. Imports express.Router from 'express' and 'userController.js' from '../controllers'. Contains route definitions '/user/register' (POST), '/user/login' (POST), '/user/resetPassword' (POST). Exports router for use in 'app.js'. Language: JavaScript.",
                            "diagramRoutes.js": "Defines routes for diagram actions. Imports express.Router from 'express' and 'diagramController.js' from '../controllers'. Contains route definitions '/diagram/create' (POST), '/diagram/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'. Language: JavaScript.",
                            "instructionRoutes.js": "Defines routes for instruction actions. Imports express.Router from 'express' and 'instructionController.js' from '../controllers'. Contains route definitions '/instruction/create' (POST), '/instruction/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'. Language: JavaScript.",
                            "avatarRoutes.js": "Defines routes for avatar actions. Imports express.Router from 'express' and 'avatarController.js' from '../controllers'. Contains route definitions '/avatar/create' (POST), '/avatar/:id' (GET). Exports router for use in 'app.js'. Language: JavaScript.",
                            "jobRoutes.js": "Defines routes for job actions. Imports express.Router from 'express' and 'jobController.js' from '../controllers'. Contains route definitions '/job/create' (POST), '/job/:id' (GET, PUT, DELETE). Exports router for use in 'app.js'. Language: JavaScript.",
                            "authRoutes.js": "Defines routes for authentication actions. Imports express.Router from 'express' and 'authController.js' from '../controllers'. Contains route definitions '/auth/login' (POST), '/auth/logout' (POST). Exports router for use in 'app.js'. Language: JavaScript.",
                            "index.js": " Defines routes for all actions. Imports express.Router from 'express' and all routes from './routes'. Contains route definitions for all routes. Exports router for use in 'app.js'. Language: JavaScript."
                        },
                        "models": {
                            "userModel.js": "Defines the user model. Imports 'mongoose' from 'mongoose'. Contains the user model definition. Exports model for use in 'userController.js'. Language: JavaScript.",
                            "diagramModel.js": "Defines the diagram model. Imports 'mongoose' from 'mongoose'. Contains the diagram model definition. Exports model for use in 'diagramController.js'. Language: JavaScript.",
                            "instructionModel.js": "Defines the instruction model. Imports 'mongoose' from 'mongoose'. Contains the instruction model definition. Exports model for use in 'instructionController.js'. Language: JavaScript.",
                            "jobModel.js": "Defines the job model. Imports 'mongoose' from 'mongoose'. Contains the job model definition. Exports model for use in 'jobController.js'. Language: JavaScript.",
                            "avatarModel.js": "Defines the avatar model. Imports 'mongoose' from 'mongoose'. Contains the avatar model definition. Exports model for use in 'avatarController.js'. Language: JavaScript.",
                            "actionLogModel.js": "This file defines the ActionLog model using mongoose. It specifies the schema for action logs and exports the ActionLog model.",
                            "passwordResetModel.js": "This file defines the PasswordReset model using mongoose. It specifies the schema for password resets and exports the PasswordReset model.",
                            "notificationModel.js": "This file defines the Notification model using mongoose. It specifies the schema for notifications and exports the Notification model."
                        }
                    },
                    "utils": {
                        "gpt4API.js": "Handles interactions with the GPT-4 API. Contains functions 'generateInstructions', 'generateDiagram', 'generateSequenceDiagram'. Used in 'diagramController.js'. Language: JavaScript.",
                        "avatarAPI.js": "Handles interactions with the avatar generation API. Contains function 'generateAvatar'. Used in 'avatarController.js'. Language: JavaScript.",
                        "redis.js": "Sets up interactions with Redis for job queuing. Contains functions 'createJob', 'getJob', 'updateJob', 'deleteJob'. Used in 'jobController.js'. Language: JavaScript.",
                        "jwtUtils.js": "Handles JWT authentication. Contains functions 'generateToken', 'verifyToken'. Used in 'authController.js'. Language: JavaScript.",
                        "errorHandler.js": "Handles errors. Contains function 'handleError'. Used in 'errorMiddleware.js'. Language: JavaScript.",
                        "apiUtils.js": "This file contains utility functions for handling API requests and responses. Exports functions like handleSuccess(), handleFailure().",
                        "databaseUtils.js": "This file contains utility functions for interacting with the database. Exports functions like connectDB(), closeDB().",
                        "imageStorageService.js": "This file contains utility functions for interacting with the image storage service. Exports functions like uploadImage(), deleteImage(). Handles image storage. Used in avatarController.js"
                    },
                    "config": {
                        "db.js": "Configuration file for setting up the database using mongoose. Contains a function to initialize and connect to the database. Language: JavaScript."
                    },
                    "app.js": "The main application file. Imports 'express' from 'express', 'cors' from 'cors', 'morgan' from 'morgan', 'helmet' from 'helmet', and all routes from './routes'. Sets up middleware and routes, and starts the server. Language: JavaScript."
                },
                "package.json": "Describes the app and its dependencies. Lists all packages and scripts needed to run the project. Language: JSON.",
                "README.md": "Provides information about the project including: project description, features, installation instructions, usage examples, API documentation, and license information. Contains a sequence diagram of backend and front-end interactions. Language: Markdown.",
                ".env": "Contains environment variables. db keys, gpt4API. Language: Text.",
                ".gitignore": "Contains files and folders to be ignored by git. Language: Text.",
                "Dockerfile": "Contains instructions for building the Docker image. Language: Text.",
                "docker-compose.yml": "Contains instructions for running the Docker image. Language: Text."
            }
        }
    }
}